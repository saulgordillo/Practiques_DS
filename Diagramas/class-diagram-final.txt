@startuml
skinparam classAttributeIconSize 0

package java.util{
    abstract Observable {
    +addObserver(observer : Observer)
    +deleteObserver(observer : Observer)
    +setChanged()
    +notifyObservers(observable : Observable, object : Object)
  }

  interface Observer {
    +update(observable : Observable, object : Object)
  }

  Observable --> Observer : observers
}

class Clock {
  -myTimer: Timer
  -Clock()
  +getInstance()
  +tick()
  +deleteTimer()
}

class Interval {
  -initialDate : LocalDateTime
  -finalDate : LocalDateTime
  -duration : Duration
  -myTask : Task
  +Interval(task : Task) : Interval
  +printInterval()
  +calculateInterval()
  +update(observable : Observable, object : Object)
  +intervalToJOSON() : JSONObject
}

class Task {
  -intervals : List<Interval>
  +Task() : Task
  +Task(name : String, father : Project) : Task
  +calculateDuration()
  +start()
  +stop()
  +taskToJSON() : JSONObject
}

class Project {
  -activitis : List<Activity>
  +Project() : Project
  +Project(isRoot : boolean) : Project
  +Project(name : String, father : Project) : Project
  +addChild(child : Activity)
  +calculateDuration()
  +projectToJSON() : JSONObject
}

abstract Activity {
  #name : string
  #initialHour : LocalDateTime
  #finalHour : LocalDateTime
  #duration : Duration
  #projectFather : Project
  #isRoot : boolean
  +Activity() : Activity
  +Activity(activity : Activity) : Activity
  +Activity(name : String, father : Project) : Activity
  +updateDatesAndDuration(initialDate : LocalDateTime, finalDate : LocalDateTime)
  +calculateDuration()
  +activityToJSON(act : JSONObject) : JSONObject
  +printActivity()
  +printName()
}

Clock --|> Observable
Interval ..|> Observer
Interval "n" --* "1" Task : intervals
Task --|> Activity
Project --|> Activity
Project "n" --* "1" Activity : projects

@enduml